(function (t) { function e(e) { for (var a, c, n = e[0], l = e[1], o = e[2], u = 0, p = []; u < n.length; u++)c = n[u], Object.prototype.hasOwnProperty.call(i, c) && i[c] && p.push(i[c][0]), i[c] = 0; for (a in l) Object.prototype.hasOwnProperty.call(l, a) && (t[a] = l[a]); d && d(e); while (p.length) p.shift()(); return r.push.apply(r, o || []), s() } function s() { for (var t, e = 0; e < r.length; e++) { for (var s = r[e], a = !0, n = 1; n < s.length; n++) { var l = s[n]; 0 !== i[l] && (a = !1) } a && (r.splice(e--, 1), t = c(c.s = s[0])) } return t } var a = {}, i = { app: 0 }, r = []; function c(e) { if (a[e]) return a[e].exports; var s = a[e] = { i: e, l: !1, exports: {} }; return t[e].call(s.exports, s, s.exports, c), s.l = !0, s.exports } c.m = t, c.c = a, c.d = function (t, e, s) { c.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: s }) }, c.r = function (t) { "undefined" !== typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, c.t = function (t, e) { if (1 & e && (t = c(t)), 8 & e) return t; if (4 & e && "object" === typeof t && t && t.__esModule) return t; var s = Object.create(null); if (c.r(s), Object.defineProperty(s, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var a in t) c.d(s, a, function (e) { return t[e] }.bind(null, a)); return s }, c.n = function (t) { var e = t && t.__esModule ? function () { return t["default"] } : function () { return t }; return c.d(e, "a", e), e }, c.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, c.p = "/VueForm/"; var n = window["webpackJsonp"] = window["webpackJsonp"] || [], l = n.push.bind(n); n.push = e, n = n.slice(); for (var o = 0; o < n.length; o++)e(n[o]); var d = l; r.push([0, "chunk-vendors"]), s() })({ 0: function (t, e, s) { t.exports = s("56d7") }, "56d7": function (t, e, s) { "use strict"; s.r(e); s("ac1f"), s("466d"), s("5319"), s("e260"), s("e6cf"), s("cca6"), s("a79d"); var a = s("2b0e"), i = s("1dce"), r = s.n(i), c = function () { var t = this, e = t.$createElement, s = t._self._c || e; return s("div", { attrs: { id: "app" } }, [s("form", { staticClass: "form", on: { submit: function (e) { return e.preventDefault(), t.submitForm(e) } } }, [s("div", { staticClass: "person-form" }, [s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "form-label", attrs: { for: "user-name" } }, [t._v("Имя*")]), s("input", { directives: [{ name: "model", rawName: "v-model.trim", value: t.name, expression: "name", modifiers: { trim: !0 } }], staticClass: "form-input", attrs: { type: "text", id: "user-name" }, domProps: { value: t.name }, on: { input: function (e) { e.target.composing || (t.name = e.target.value.trim()) }, blur: function (e) { return t.$forceUpdate() } } }), s("small", { class: { invalid: t.$v.name.$dirty && !t.$v.name.required } }, [t._v("Поле обязательно для заполнения")]), s("small", { class: { invalid: t.$v.name.$dirty && !t.$v.name.alpha } }, [t._v("В поле не должны содержаться цифры и буквы латинского алфавита")])]), s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "form-label", attrs: { for: "user-lastname" } }, [t._v("Фамилия*")]), s("input", { directives: [{ name: "model", rawName: "v-model.trim", value: t.lastname, expression: "lastname", modifiers: { trim: !0 } }], staticClass: "form-input", attrs: { type: "text", id: "user-lastname" }, domProps: { value: t.lastname }, on: { input: function (e) { e.target.composing || (t.lastname = e.target.value.trim()) }, blur: function (e) { return t.$forceUpdate() } } }), s("small", { class: { invalid: t.$v.lastname.$dirty && !t.$v.lastname.required } }, [t._v("Поле обязательно для заполнения")]), s("small", { class: { invalid: t.$v.lastname.$dirty && !t.$v.lastname.alpha } }, [t._v("В поле не должны содержаться цифры и буквы латинского алфавита")])]), t._m(0), s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "form-label", attrs: { for: "user-birthday" } }, [t._v("Дата рождения*")]), s("input", { directives: [{ name: "model", rawName: "v-model", value: t.birthday, expression: "birthday" }], staticClass: "form-input", attrs: { type: "date", id: "user-birthday" }, domProps: { value: t.birthday }, on: { input: function (e) { e.target.composing || (t.birthday = e.target.value) } } }), s("small", { class: { invalid: t.$v.birthday.$dirty && !t.$v.birthday.required } }, [t._v("Поле обязательно для заполнения")])]), s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "form-label", attrs: { for: "user-phone" } }, [t._v("Телефон*")]), s("input", { directives: [{ name: "model", rawName: "v-model", value: t.phone, expression: "phone" }, { name: "phone", rawName: "v-phone" }], staticClass: "form-input", attrs: { type: "tel", id: "user-phone", pattern: "[(][0-9]{3}[)] [0-9]{3}-[0-9]{2}-[0-9]{2}" }, domProps: { value: t.phone }, on: { input: function (e) { e.target.composing || (t.phone = e.target.value) } } }), s("small", { class: { invalid: t.$v.phone.$dirty && !t.$v.phone.required } }, [t._v("Поле обязательно для заполнения")])])]), s("div", { staticClass: "selects" }, [s("div", { staticClass: "select", on: { click: function (e) { t.optionsVisible = !t.optionsVisible } } }, [s("div", { staticClass: "select__header" }, [s("span", { staticClass: "select__current" }, [t._v(t._s(t.selected))]), t._m(1)]), t.optionsVisible ? s("div", { staticClass: "select__body" }, t._l(t.bodyOptions, (function (e) { return s("div", { key: e.value, staticClass: "select__item", on: { click: function (s) { return t.selectOption(e) } } }, [t._v(t._s(e.name))]) })), 0) : t._e()]), s("div", { staticClass: "select checkhead", on: { click: function (e) { t.optsVisible = !0 }, mouseleave: function (e) { t.optsVisible = !1 } } }, [t._m(2), t.optsVisible ? s("div", { staticClass: "check__body" }, [s("label", { staticClass: "check" }, [s("input", { directives: [{ name: "model", rawName: "v-model", value: t.client, expression: "client" }], staticClass: "check__input", attrs: { id: "VIP", value: "VIP", type: "checkbox" }, domProps: { checked: Array.isArray(t.client) ? t._i(t.client, "VIP") > -1 : t.client }, on: { change: function (e) { var s = t.client, a = e.target, i = !!a.checked; if (Array.isArray(s)) { var r = "VIP", c = t._i(s, r); a.checked ? c < 0 && (t.client = s.concat([r])) : c > -1 && (t.client = s.slice(0, c).concat(s.slice(c + 1))) } else t.client = i } } }), s("span", { staticClass: "check__box" }), t._v(" VIP ")]), s("label", { staticClass: "check" }, [s("input", { directives: [{ name: "model", rawName: "v-model", value: t.client, expression: "client" }], staticClass: "check__input", attrs: { id: "Проблемные", value: "Проблемные", type: "checkbox" }, domProps: { checked: Array.isArray(t.client) ? t._i(t.client, "Проблемные") > -1 : t.client }, on: { change: function (e) { var s = t.client, a = e.target, i = !!a.checked; if (Array.isArray(s)) { var r = "Проблемные", c = t._i(s, r); a.checked ? c < 0 && (t.client = s.concat([r])) : c > -1 && (t.client = s.slice(0, c).concat(s.slice(c + 1))) } else t.client = i } } }), s("span", { staticClass: "check__box" }), t._v(" Проблемные ")]), s("label", { staticClass: "check" }, [s("input", { directives: [{ name: "model", rawName: "v-model", value: t.client, expression: "client" }], staticClass: "check__input", attrs: { id: "ОМС", value: "ОМС", type: "checkbox" }, domProps: { checked: Array.isArray(t.client) ? t._i(t.client, "ОМС") > -1 : t.client }, on: { change: function (e) { var s = t.client, a = e.target, i = !!a.checked; if (Array.isArray(s)) { var r = "ОМС", c = t._i(s, r); a.checked ? c < 0 && (t.client = s.concat([r])) : c > -1 && (t.client = s.slice(0, c).concat(s.slice(c + 1))) } else t.client = i } } }), s("span", { staticClass: "check__box" }), t._v(" ОМС ")])]) : t._e(), s("small", { class: { selinvalid: t.$v.client.$dirty && !t.$v.client.required } }, [t._v("Поле обязательно для заполнения")])]), s("div", { staticClass: "select doctor", on: { click: function (e) { t.optsVis = !t.optsVis } } }, [s("div", { staticClass: "select__header" }, [s("span", { staticClass: "doctor__current" }, [t._v(t._s(t.seld))]), t._m(3)]), t.optsVis ? s("div", { staticClass: "doctor__body" }, t._l(t.docOptions, (function (e) { return s("div", { key: e.value, staticClass: "doctor__item", on: { click: function (s) { return t.selectOpt(e) } } }, [t._v(t._s(e.name))]) })), 0) : t._e()])]), t._m(4), s("h3", { staticClass: "form__title" }, [t._v("Адрес")]), s("div", { staticClass: "adress-form" }, [t._m(5), t._m(6), t._m(7), s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "label", attrs: { for: "user-city" } }, [t._v("Город*")]), s("input", { directives: [{ name: "model", rawName: "v-model.trim", value: t.city, expression: "city", modifiers: { trim: !0 } }], staticClass: "form-input adress-input", attrs: { type: "text", id: "user-city" }, domProps: { value: t.city }, on: { input: function (e) { e.target.composing || (t.city = e.target.value.trim()) }, blur: function (e) { return t.$forceUpdate() } } }), s("small", { class: { invalid: t.$v.city.$dirty && !t.$v.city.required } }, [t._v("Поле обязательно для заполнения")]), s("small", { class: { invalid: t.$v.city.$dirty && !t.$v.city.alpha } }, [t._v("В поле не должны содержаться цифры и буквы латинского алфавита")])]), t._m(8), t._m(9)]), s("h3", { staticClass: "form__title" }, [t._v("Документы")]), s("div", { staticClass: "select docs", on: { click: function (e) { t.optVis = !0 }, mouseleave: function (e) { t.optVis = !1 } } }, [s("div", { staticClass: "select__header" }, [s("span", { staticClass: "docs__current", attrs: { value: t.docsel, id: t.docsel } }, [t._v(t._s(t.docsel))]), t._m(10)]), t.optVis ? s("div", { staticClass: "docs__body" }, [s("label", { staticClass: "check" }, [s("input", { directives: [{ name: "model", rawName: "v-model", value: t.docs, expression: "docs" }], staticClass: "check__input", attrs: { id: "Паспорт", value: "Паспорт", type: "checkbox" }, domProps: { checked: Array.isArray(t.docs) ? t._i(t.docs, "Паспорт") > -1 : t.docs }, on: { change: function (e) { var s = t.docs, a = e.target, i = !!a.checked; if (Array.isArray(s)) { var r = "Паспорт", c = t._i(s, r); a.checked ? c < 0 && (t.docs = s.concat([r])) : c > -1 && (t.docs = s.slice(0, c).concat(s.slice(c + 1))) } else t.docs = i } } }), s("span", { staticClass: "check__box" }), t._v(" Паспорт ")]), s("label", { staticClass: "check" }, [s("input", { directives: [{ name: "model", rawName: "v-model", value: t.docs, expression: "docs" }], staticClass: "check__input", attrs: { id: "Св-во о рождении", value: "Св-во о рождении", type: "checkbox" }, domProps: { checked: Array.isArray(t.docs) ? t._i(t.docs, "Св-во о рождении") > -1 : t.docs }, on: { change: function (e) { var s = t.docs, a = e.target, i = !!a.checked; if (Array.isArray(s)) { var r = "Св-во о рождении", c = t._i(s, r); a.checked ? c < 0 && (t.docs = s.concat([r])) : c > -1 && (t.docs = s.slice(0, c).concat(s.slice(c + 1))) } else t.docs = i } } }), s("span", { staticClass: "check__box" }), t._v(" Св-во о рождении ")]), s("label", { staticClass: "check" }, [s("input", { directives: [{ name: "model", rawName: "v-model", value: t.docs, expression: "docs" }], staticClass: "check__input", attrs: { id: "Вод. удостоверение", value: "Вод. удостоверение", type: "checkbox" }, domProps: { checked: Array.isArray(t.docs) ? t._i(t.docs, "Вод. удостоверение") > -1 : t.docs }, on: { change: function (e) { var s = t.docs, a = e.target, i = !!a.checked; if (Array.isArray(s)) { var r = "Вод. удостоверение", c = t._i(s, r); a.checked ? c < 0 && (t.docs = s.concat([r])) : c > -1 && (t.docs = s.slice(0, c).concat(s.slice(c + 1))) } else t.docs = i } } }), s("span", { staticClass: "check__box" }), t._v(" Вод. удостоверение ")])]) : t._e(), s("small", { class: { selinvalid: t.$v.docs.$dirty && !t.$v.docs.required } }, [t._v("Поле обязательно для заполнения")])]), s("div", { staticClass: "adress-form" }, [t._m(11), t._m(12), t._m(13), s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "label", attrs: { for: "user-issueday" } }, [t._v("Дата выдачи*")]), s("input", { directives: [{ name: "model", rawName: "v-model", value: t.issueday, expression: "issueday" }], staticClass: "form-input adress-input", attrs: { type: "date", id: "user-issueday" }, domProps: { value: t.issueday }, on: { input: function (e) { e.target.composing || (t.issueday = e.target.value) } } }), s("small", { class: { invalid: t.$v.issueday.$dirty && !t.$v.issueday.required } }, [t._v("Поле обязательно для заполнения")])])]), s("button", { staticClass: "form-btn", attrs: { type: "submit" } }, [t._v("Отправить")])]), t.modalVis ? s("div", { staticClass: "form-modal" }, [s("div", { staticClass: "form-modal__content" }, [s("h2", { staticClass: "form-modal__title" }, [t._v("Спасибо!")]), s("p", { staticClass: "form-modal__text" }, [t._v("Новый клиент успешно создан!")]), s("button", { staticClass: "form-modal__btn", on: { click: function (e) { t.modalVis = !1 } } }, [t._v("Ok")])])]) : t._e()]) }, n = [function () { var t = this, e = t.$createElement, s = t._self._c || e; return s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "form-label", attrs: { for: "user-patronymic" } }, [t._v("Отчество")]), s("input", { staticClass: "form-input", attrs: { type: "text", id: "user-patronymic" } })]) }, function () { var t = this, e = t.$createElement, a = t._self._c || e; return a("div", { staticClass: "select__icon" }, [a("img", { attrs: { src: s("6334"), alt: "arrow-down" } })]) }, function () { var t = this, e = t.$createElement, a = t._self._c || e; return a("div", { staticClass: "select__header" }, [a("span", { staticClass: "select__current check__current" }, [t._v("Группа клиентов*")]), a("div", { staticClass: "select__icon" }, [a("img", { attrs: { src: s("6334"), alt: "arrow-down" } })])]) }, function () { var t = this, e = t.$createElement, a = t._self._c || e; return a("div", { staticClass: "select__icon" }, [a("img", { attrs: { src: s("6334"), alt: "arrow-down" } })]) }, function () { var t = this, e = t.$createElement, s = t._self._c || e; return s("div", { staticClass: "sms-block" }, [s("label", { staticClass: "sms-check" }, [s("input", { staticClass: "check__input", attrs: { type: "checkbox" } }), s("span", { staticClass: "check__box" }), t._v(" Не отправлять СМС ")])]) }, function () { var t = this, e = t.$createElement, s = t._self._c || e; return s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "label", attrs: { for: "user-index" } }, [t._v("Индекс")]), s("input", { staticClass: "form-input adress-input", attrs: { type: "text", id: "user-index" } })]) }, function () { var t = this, e = t.$createElement, s = t._self._c || e; return s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "label", attrs: { for: "user-country" } }, [t._v("Страна")]), s("input", { staticClass: "form-input adress-input", attrs: { type: "text", id: "user-country" } })]) }, function () { var t = this, e = t.$createElement, s = t._self._c || e; return s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "label", attrs: { for: "user-region" } }, [t._v("Область")]), s("input", { staticClass: "form-input adress-input", attrs: { type: "text", id: "user-region" } })]) }, function () { var t = this, e = t.$createElement, s = t._self._c || e; return s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "label", attrs: { for: "user-street" } }, [t._v("Улица")]), s("input", { staticClass: "form-input adress-input", attrs: { type: "text", id: "user-street" } })]) }, function () { var t = this, e = t.$createElement, s = t._self._c || e; return s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "label", attrs: { for: "user-house-num" } }, [t._v("Дом")]), s("input", { staticClass: "form-input adress-input", attrs: { type: "text", id: "user-house-num" } })]) }, function () { var t = this, e = t.$createElement, a = t._self._c || e; return a("div", { staticClass: "select__icon" }, [a("img", { attrs: { src: s("6334"), alt: "arrow-down" } })]) }, function () { var t = this, e = t.$createElement, s = t._self._c || e; return s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "label", attrs: { for: "user-series" } }, [t._v("Серия")]), s("input", { staticClass: "form-input adress-input", attrs: { type: "text", id: "user-series" } })]) }, function () { var t = this, e = t.$createElement, s = t._self._c || e; return s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "label", attrs: { for: "user-number" } }, [t._v("Номер")]), s("input", { staticClass: "form-input adress-input", attrs: { type: "text", id: "user-number" } })]) }, function () { var t = this, e = t.$createElement, s = t._self._c || e; return s("div", { staticClass: "adress-form__input" }, [s("label", { staticClass: "label", attrs: { for: "user-region" } }, [t._v("Кем выдан")]), s("input", { staticClass: "form-input adress-input", attrs: { type: "text", id: "user-region" } })]) }], l = (s("b0c0"), s("b5ae")), o = l["helpers"].regex("alpha", /^[а-яёА-ЯЁ]*$/), d = { validations: { name: { required: l["required"], alpha: o }, lastname: { required: l["required"], alpha: o }, birthday: { required: l["required"] }, phone: { required: l["required"] }, client: { required: l["required"] }, city: { required: l["required"], alpha: o }, docs: { required: l["required"] }, issueday: { required: l["required"] } }, props: { options: { type: Array, default: function () { return [] } } }, data: function () { return { name: "", lastname: "", birthday: "", phone: "", client: [], city: "", docs: [], issueday: "", bodyOptions: [{ name: "Мужской", value: "Мужской" }, { name: "Женский", value: "Женский" }], selected: "Пол", optionsVisible: !1, optsVisible: !1, optsVis: !1, optVis: !1, modalVis: !1, form: !0, docOptions: [{ name: "Иванов", value: "Иванов" }, { name: "Захаров", value: "Захаров" }, { name: "Чернышева", value: "Чернышева" }], seld: "Лечащий врач", docsOpt: [{ id: "Паспорт", value: "Паспорт" }, { id: "Св-во о рождении", value: "Св-во о рождении" }, { id: "Вод.удостоверение", value: "Вод.удостоверение" }], docsel: "Тип документа*" } }, methods: { selectOption: function (t) { this.selected = t.value }, selectOpt: function (t) { this.seld = t.value }, selOpts: function (t) { this.docsel = t.value }, submitForm: function () { this.$v.$invalid ? this.$v.$touch() : (this.modalVis = !0, this.name = "", this.lastname = "", this.birthday = "", this.phone = "", this.client = "", this.docs = "", this.issueday = "", this.city = "", this.$v.$reset()) } } }, u = d, p = (s("cf25"), s("2877")), v = Object(p["a"])(u, c, n, !1, null, null, null), m = v.exports, _ = s("2f62"); a["a"].use(_["a"]); var f = new _["a"].Store({ state: {}, mutations: {}, actions: {}, modules: {} }); a["a"].config.productionTip = !1, a["a"].config.devtools = !0, a["a"].directive("phone", { bind: function (t) { t.oninput = function (e) { if (e.isTrusted) { var s = this.value.replace(/\D/g, "").match(/(\d{0,3})(\d{0,3})(\d{0,2})(\d{0,2})/); this.value = s[2] ? "(" + s[1] + ") " + s[2] + (s[3] ? "-" + s[3] + "-" + s[4] : "") : s[1], t.dispatchEvent(new Event("input")) } } } }), a["a"].use(r.a), new a["a"]({ store: f, render: function (t) { return t(m) } }).$mount("#app") }, 6334: function (t, e, s) { t.exports = s.p + "/img/down-arrow.2bae6cf6.svg" }, cf25: function (t, e, s) { "use strict"; var a = s("fea6"), i = s.n(a); i.a }, fea6: function (t, e, s) { } });
//# sourceMappingURL=app.cad09506.js.map
